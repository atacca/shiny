library(shiny)
library(shinythemes)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(lubridate)
library(RMySQL)

# - TRUNCATED - #

## - END SQL SECTION - ##


##### ###################
### TIDY UP FROM IMPORT
##### ###################

df <- df %>%
  mutate(linenumber = row_number())
df$timestamp <- as.POSIXct(df$timestamp)
df$dtStart <- as.POSIXct(df$dtStart)

#change the sede names that either aren't relevant anymore (keep an eye on this, may be temp)
df$sede <- gsub("^\\*", "", df$sede)
df$sede <- gsub("Roma Spagna", "Roma Prati", df$sede)

# get a test count of unfinished tests (where finalRes == 0) (this needs to happen before they're filtered out)
count_unfinishedTests <- df[!duplicated(df$testCode), ] %>%
  filter(finalRes == 0) 
count_unfinishedTests <- n_distinct(count_unfinishedTests$testCode)
paste0("Number of unfinished tests = ", count_unfinishedTests)

#filter out any unfinished tests (where finalRes == 0)
df <- df %>%
  filter(!finalRes == 0)

### NEW COLUMNS ADDED TO DF RELATING TO TIMES COMPLETED, CODE IS UNDER 'TIMES TAKEN TO COMPLETE' ###


##### ###########
### ANALYSIS
##### ###########

# TEST COUNT  (n_distinct is the same as length(unique(df$col)))
count_tests <- n_distinct(df$testCode)


### CALCULATE THE TIMES TAKEN TO COMPLETE #
df_timestamp <- df %>%
  select(c("testCode", "timestamp"))

df_timestamp <- df_timestamp[with(df_timestamp, order(testCode, timestamp)), ]    
times_started <- df_timestamp[!duplicated(df_timestamp$testCode,
                                          fromLast = FALSE),  "timestamp"]
times_finished <- df_timestamp[!duplicated(df_timestamp$testCode,
                                           fromLast = TRUE), "timestamp"]
test_times <- data.frame(times_started, times_finished)


# ADD NEW COLUMNS RELATING TO WHEN COMPLETED AND IF FINISHED ON A DIFFERENT DAY (doesn't build upon the test_times
# object, uses a new one, adding the testCode and new time columns w/o HMS. Making it confusing now, will clean up l8)
time_testsDone <- df %>%
  select(c("testCode", "sede", "timestamp"))
#order the df by testcode and then time (we'll take the first question timestamp for simplicity)
time_testsDone <- time_testsDone[with(time_testsDone, order(testCode, timestamp)), ]
#remove duplicates, leaving the 1st entry (i.e. the 1st question time) and strip HMS
time_testsDone <- data.frame(time_testsDone[!duplicated(time_testsDone$testCode), ]) %>%
  rename(firstQ = timestamp)
time_testsDone$firstQ <- as.POSIXct(format(time_testsDone$firstQ, format = "%Y-%m-%d"))
#add a column for the last time and strip HM
time_testsDone$lastQ <- times_finished
time_testsDone$lastQ <- as.POSIXct(format(time_testsDone$lastQ, format = "%Y-%m-%d"))

# check if tests started & finished on the same day, add a new column for them
for (i in 1:nrow(time_testsDone)) {
  if (time_testsDone$firstQ[i] == time_testsDone$lastQ[i]) {
    time_testsDone$finishedSameDay[i] = "YES" }
  else {
    time_testsDone$finishedSameDay[i] = "NO"
  }
  i = i + 1
}


## NOW TO CALCULATE THE TIME TAKEN FOR A TEST. REMOVED ARE TESTS STARTED ON 1 DAY AND COMPLETED ON ANOTHER ##
# I'll cbind time_testsDone w/ test_times, to put all the info together. Sure it didn't need to be 2 objects, TO FIX
test_times <- cbind(time_testsDone, test_times)

# loop through each row, calc time diff, add result to df
test_lengths_list <- list()
i <- 1
for (i in 1:nrow(test_times)) {
  x <- difftime(test_times$times_finished[i], test_times$times_started[i], units = "mins")
  test_lengths_list[[i]] <- x
  i <- i + 1
}
test_lengths <- do.call(rbind, test_lengths_list)

# combine the start & finish times with the time difference between the two
time_taken <- cbind(test_times, test_lengths)
time_taken <- time_taken %>%
  rename(times = "test_lengths")
time_taken$times <- round(time_taken$times, digits = 1)

#now remove the tests that started and finished in more than 60mins 
time_taken_filteredToSixty <- time_taken %>%
  filter(times < 60)

#ok, let's get the actual short tests (<5 mins)
time_taken_filteredShort <- time_taken %>%
  filter(times < 5)

#now remove the tests that started and finished in less than 60mins 
time_taken_filteredLong <- time_taken %>%
  filter(times > 60)
#NOTE: this table is trimmed down for shiny - it's done below, in the shiny server section


# LET's PUT THE NEW COLUMNS BACK INTO THE BASE DF (firstQ, lastQ, finishedSameDay, times) TO KEEP EVERYTHING TOGETHER
df$firstQ <- time_testsDone$firstQ[match(df$testCode, time_testsDone$testCode)]
df$lastQ <- time_testsDone$lastQ[match(df$testCode, time_testsDone$testCode)]
df$finishedSameDay <- time_testsDone$finishedSameDay[match(df$testCode, time_testsDone$testCode)]
df$minutesToComplete <- time_taken$times[match(df$testCode, time_taken$testCode)]


# PLOT THE TIMES TAKEN TO COMPLETE
# get average time to complete, and reformat to time
test_lengths_avg <- as.duration(mean(time_taken_filteredToSixty$times))
# make a label with the average, to place on the plot
text_for_plot_avg <- paste0("Average time to complete = ", round(test_lengths_avg, digits = 2))



# COUNT OF TESTS BY SEDE #
count_bySede <- df %>%
  group_by(sede) %>%
  summarise(n_distinct(testCode)) %>%
  rename(Count = `n_distinct(testCode)`) %>%
  arrange(Count)    ## new df filtered by test code, counts by sede


# COUNT OF TESTS TODAY BY SEDE (NEED TO USE THE 'times_finished' object, created above) #
#using the time_testsDone dataframe that was created at the start
#now to start the count. first to strip the hours from the timestamp
count_testsDoneToday <- time_testsDone
count_testsDoneToday <- count_testsDoneToday %>%
  filter(firstQ == format(Sys.Date())) %>%
  count(sede) %>%
  rename(Count = n) %>%
  arrange(desc(Count))
count_testsDoneToday


# TESTS TAKEN OVER TIME #
tests_overTime <- df[!duplicated(df$testCode), ] %>%
  rename(Date = firstQ) %>%
  arrange(Date) %>%
  mutate(Test_Number = row_number())    ## filter, change DT, reorder


# TESTS TAKEN OVER TIME BY SEDE
tests_overTime2 <- df[!duplicated(df["testCode"]), ] %>%
  select(c("sede", "testCode", "firstQ"))
tests_overTime2$firstQ <- as.Date(tests_overTime2$firstQ)

#rename NAs (will need to move renaming NAs to the root df, to be done!)
tests_overTime2$sede <- as.character(tests_overTime2$sede)
tests_overTime2$sede[is.na(tests_overTime2$sede)] <- "Not Set"


# FLUENCY CHECK DONE/NOT DONE #
df_Fluency <- data.frame(df) %>%
  select(c("testCode", "flCEFR")) %>%
  transform(flCEFR = as.numeric(flCEFR))    ## new df with relevant cols

df_Fluency2 <- df_Fluency[match(unique(df_Fluency$testCode),
                                df_Fluency$testCode), ]    ## reduce to 1 row per test code

count_ifDone <- sum(df_Fluency2$flCEFR > 0)                 
count_ifNotDone <- sum(df_Fluency2$flCEFR==0)

fcNames <- c("FC done", "FC not done")    ## col names for the below df
count_ifFluencyDone <- data.frame(c(count_ifDone, count_ifNotDone)) %>%
  cbind(fcNames) %>%
  rename(Count = "c.count_ifDone..count_ifNotDone.",
         If_Done = "fcNames")    ## new df for the tallies

count_ifFluencyDone <- count_ifFluencyDone[, c(2, 1)]    ## reorder the df


#TABLE OF TESTS GREATER THAN 60MINS TO COMPLETE
time_taken_filteredLong_shiny <- time_taken_filteredLong %>% 
  select(-c("firstQ", "lastQ")) %>%
  rename(MinutesToComplete = times) %>%
  arrange(desc(times_finished)) %>%
  filter(times_finished > format(Sys.Date()-14))
time_taken_filteredLong_shiny$times_started <- as.character(as.Date(time_taken_filteredLong_shiny$times_started))
time_taken_filteredLong_shiny$times_finished <- as.character(as.Date(time_taken_filteredLong_shiny$times_finished))


#TABLE OF TESTS GREATER THAN 60MINS TO COMPLETE
time_taken_filteredShort_shiny <- time_taken_filteredShort %>% 
  select(-c("firstQ", "lastQ")) %>%
  rename(MinutesToComplete = times) %>%
  arrange(desc(times_finished)) %>%
  filter(times_finished > format(Sys.Date()-14))
time_taken_filteredShort_shiny$times_started <- as.character(as.Date(time_taken_filteredShort_shiny$times_started))
time_taken_filteredShort_shiny$times_finished <- as.character(as.Date(time_taken_filteredShort_shiny$times_finished))



# AVERAGE RESPONSE TIME BY SECTION # (this goes for ~100 lines, plus there are plots for it in the server section)
## at the moment each SEAT Q section is done separately below, then combined. Eventually I'll need to redo it as a
## formula or a better loop

### MC SECTION ###
# starting with a trial dataset in a separate df, then will build a full one
df_mc <- df %>% filter(section == "MC") %>%
  select(c("testCode", "shkLev", "qNum", "timestamp", "section"))

# order the results by code then timestamp
df_mc <- df_mc[with(df_mc, order(testCode, timestamp)), ]

#take the first and last times for each test code, then combine
mc_times_started <- df_mc[!duplicated(df_mc$testCode, fromLast = FALSE), ]
mc_times_finished <- df_mc[!duplicated(df_mc$testCode, fromLast = TRUE), ]

mc_timestamps <- data.frame(mc_times_started, finished = mc_times_finished$timestamp)

# get the time difference between each start and finish times
mc_times_list <- list()

for (i in 1:nrow(mc_timestamps)) {
  x <- mc_timestamps$finished[i] - mc_timestamps$timestamp[i]
  mc_times_list[[i]] <- x
  i <- i + 1
}
mc_times <- data.frame(MC = do.call(rbind, mc_times_list))

#now bind the mc_timestamps with mc_times so that the times taken are linked with testCodes and shkLevs
mc_timestamps <- cbind(mc_timestamps, mc_times)


### SC SECTION ###
# starting with a trial dataset in a separate df, then will build a full one
df_sc <- df %>% filter(section == "SC") %>%
  select(c("testCode", "shkLev", "qNum", "timestamp", "section"))

# order the results by code then timestamp
df_sc <- df_sc[with(df_sc, order(testCode, timestamp)), ]

#take the first and last times for each test code, then combine
sc_times_started <- df_sc[!duplicated(df_sc$testCode, fromLast = FALSE), ]
sc_times_finished <- df_sc[!duplicated(df_sc$testCode, fromLast = TRUE), ]

sc_timestamps <- data.frame(sc_times_started, finished = sc_times_finished$timestamp)

# get the time difference between each start and finish times
sc_times_list <- list()

for (i in 1:nrow(sc_timestamps)) {
  x <- sc_timestamps$finished[i] - sc_timestamps$timestamp[i]
  sc_times_list[[i]] <- x
  i <- i + 1
}
sc_times <- data.frame(SC = do.call(rbind, sc_times_list))

#now bind the sc_timestamps with mc_times so that the times taken are linked with testCodes and shkLevs
sc_timestamps <- cbind(sc_timestamps, sc_times)


### WO SECTION ###
# starting with a trial dataset in a separate df, then will build a full one
df_wo <- df %>% filter(section == "WO") %>%
  select(c("testCode", "shkLev", "qNum", "timestamp", "section"))

# order the results by code then timestamp
df_wo <- df_wo[with(df_wo, order(testCode, timestamp)), ]

#take the first and last times for each test code, then combine
wo_times_started <- df_wo[!duplicated(df_wo$testCode, fromLast = FALSE), ]
wo_times_finished <- df_wo[!duplicated(df_wo$testCode, fromLast = TRUE), ]

wo_timestamps <- data.frame(wo_times_started, finished = wo_times_finished$timestamp)

# get the time difference between each start and finish times
wo_times_list <- list()

for (i in 1:nrow(wo_timestamps)) {
  x <- wo_timestamps$finished[i] - wo_timestamps$timestamp[i]
  wo_times_list[[i]] <- x
  i <- i + 1
}
wo_times <- data.frame(WO = do.call(rbind, wo_times_list))

#now bind the wo_timestamps with mc_times so that the times taken are linked with testCodes and shkLevs
wo_timestamps <- cbind(wo_timestamps, wo_times)


### LI SECTION ###
# starting with a trial dataset in a separate df, then will build a full one
df_li <- df %>% filter(section == "LI") %>%
  select(c("testCode", "shkLev", "qNum", "timestamp", "section"))

# order the results by code then timestamp
df_li <- df_li[with(df_li, order(testCode, timestamp)), ]

#take the first and last times for each test code, then combine
li_times_started <- df_li[!duplicated(df_li$testCode, fromLast = FALSE), ]
li_times_finished <- df_li[!duplicated(df_li$testCode, fromLast = TRUE), ]

li_timestamps <- data.frame(li_times_started, finished = li_times_finished$timestamp)

# get the time difference between each start and finish times, make a df for ggplot
li_times_list <- list()

for (i in 1:nrow(li_timestamps)) {
  x <- li_timestamps$finished[i] - li_timestamps$timestamp[i]
  li_times_list[[i]] <- x
  i <- i + 1
}
li_times <- data.frame(LI = do.call(rbind, li_times_list))

#now bind the li_timestamps with mc_times so that the times taken are linked with testCodes and shkLevs
li_timestamps <- cbind(li_timestamps, li_times)

#the plots for the above are all in the server section

#SET UP THE TIMES TO COMPLETE EACH SECTION FOR BOX & WHISKER PLOTS (essentially, just make shkLev a factor)
#mc
mc_timestamps_box <- mc_timestamps
mc_timestamps_box$shkLev <- as.factor(mc_timestamps_box$shkLev)
#sc
sc_timestamps_box <- sc_timestamps
sc_timestamps_box$shkLev <- as.factor(sc_timestamps_box$shkLev)
#wo
wo_timestamps_box <- wo_timestamps
wo_timestamps_box$shkLev <- as.factor(wo_timestamps_box$shkLev)
#li
li_timestamps_box <- li_timestamps
li_timestamps_box$shkLev <- as.factor(li_timestamps_box$shkLev)


#LATEST FEEDBACK (NOTE: REMOVED ALL TIDYTEXT DFs AS CAN'T IMPORT CUSTOM STOPWORDS FILE - TO RESOLVE!)
#a one-off df for the latest feedback, to be sorted by date (not used in the below analysis)
df_feedback <- df[!duplicated(df["feedback"]), ]
df_feedback$firstQ <- sort(df_feedback$firstQ, decreasing = TRUE)
df_feedback$firstQ <- as.character(as.Date(df_feedback$firstQ))
df_feedback <- df_feedback %>%
  select(c("testCode", "firstQ", "feedback"))


### TO DO - ADD COUNTS OF LEVELS (DONE W/ ROGER)
### ADD select$input("sede)



## - END SEAT ANALYSIS - ##




##### ########################
##### SHINY STARTS HERE
##### ########################

## VARIABLES USED FOR THE selectInputs ##

#schools list (used in selectInput$schoolList_plot )
schoolsList <- unique(tests_overTime2$sede)
# list of Shenker Starting Levels (shkLev), with an option for all (used for selectInput$chooseSSL)
allSSLs <- c(0, 5, 10, 15, 25, 35, 50, 60, 75)
SSLs <- sort(unique(df$shkLev))


## UI STARTS HERE ##
ui <- 
  fluidPage(theme = shinytheme("superhero"),
            
            titlePanel("SEAT Dashboard: Live Data"),
            
            hr(),
            
            sidebarLayout(
              
              sidebarPanel(width = 2,
                           
                           tags$img(src = "http://stats.shenker.com/logos/SEAT_Logo.jpg",
                                    width = 165, height = 80),
                           
                           hr(),
                           
                           tags$b("Today's Date"),
                           textOutput("dateToday"),
                           
                           hr(),
                           
                           tags$b("Tests done today:"),
                           textOutput("testsToday_sidebar"),
                           
                           hr(),
                           
                           tags$b("Tests yesterday"),
                           textOutput("testsYesterday_sidebar"),
                           
                           hr(),
                           
                           tags$b("Total completed:"),
                           textOutput("totalTests_sidebar")
                           
              ), # /sPanel
              
              mainPanel(width = 10,
                        
                        fluidRow(
                          column(width = 8,
                                 wellPanel(
                                   tabsetPanel(
                                     tabPanel(title = "Tests Done",
                                              plotOutput("testsOverTime")
                                     ), # /tab
                                     tabPanel(title = "Tests by Sede",
                                              plotOutput("testsBySede")
                                     ), # /tab
                                     tabPanel(title = "Time Taken",
                                              plotOutput("testLength"),
                                              verbatimTextOutput("stats")
                                     ), # /tab
                                     tabPanel(title = "Long Tests (>60 mins)",
                                              hr(),
                                              tags$i("Tests taking longer than 60mins to complete (last 2 weeks)"),
                                              tableOutput("longTests")
                                     ), # /tab
                                     tabPanel(title = "Short Tests (<5 mins)",
                                              hr(),
                                              tags$i("Tests taking shorter than 5mins to complete (last 2 weeks)"),
                                              tableOutput("shorttests")
                                     ) # /tab
                                   ) # tabset
                                 ) # /well
                          ), # /col
                          
                          column(4,
                                 wellPanel(
                                   plotOutput("fluencyDone")
                                 ) # /well
                          ) # /col
                          
                        ), # /row
                        
                        hr(),
                        
                        fluidRow(
                          tags$h5("Tests Completed by sede"),
                          
                          column(4,
                                 selectInput("schoolList_plot", "Choose sede:",
                                             choices = schoolsList) # /sInput                        
                          ) # /col
                        ), # /row
                        
                        fluidRow(
                          wellPanel(
                            plotOutput("testsBySchool")
                          ) # /well
                        ), # /row
                        
                        hr(),
                        
                        fluidRow(
                          tags$h5("Latest Feedback"),
                          selectInput("feedbackCount", "Select amount of feedback to see",
                                      choices = seq(from = 5, to = 30, by = 5),
                                      selected = 5), # /sInput
                          tableOutput("latestFeedback")
                        ), # /row
                        
                        hr(),
                        
                        fluidRow(
                          tags$h3("SEAT Section Details"),
                          column(width = 12,
                            wellPanel(
                              tabsetPanel(
                                  tabPanel(title = "Section completion times by level",
                                           selectInput("chooseSSL", "Filter by Proposed Shenker Starting Level",
                                                       choices = c(0, 5, 10, 15, 25, 35, 50, 60, 75),
                                                       selected = 5
                                           ), # /sInput
                                             plotOutput("timesEachSection")
                                  ), # /tab
                                  tabPanel(title = "MC Boxplot",
                                    plotOutput("mcBoxplot")
                                  ), # /tab
                                  tabPanel(title = "SC Boxplot",
                                           plotOutput("scBoxplot")
                                  ), # /tab
                                  tabPanel(title = "WO Boxplot",
                                           plotOutput("woBoxplot")
                                  ), # /tab
                                  tabPanel(title = "LI Boxplot",
                                           plotOutput("liBoxplot")
                                  ) # /tab
                              ) # /panel
                            ) # /well
                          ) # /column
                        ) # /row
                        

              ) # /mainpanel
            ) # /sLayout
  ) # /page

#instructions for the server
server <- function(input, output) {
  
  #TODAY'S DATE (SIDEBAR)
  output$dateToday <- renderText ({
    format(Sys.Date())
  })
  
  
  #TOTAL TESTS COMPLETED (SIDEBAR)
  output$totalTests_sidebar <- renderText ({
    n_distinct(df$testCode)
  })
   
  
  #TEST COMPLETED TODAY & YESTERDAY (SIDEBAR)
  testsCompleted_today <- time_testsDone %>%
    filter(firstQ == format(Sys.Date()))
  testsCompleted_yesterday <- time_testsDone %>%
    filter(firstQ == format(Sys.Date()-1))
  
  output$testsToday_sidebar <- renderText ({
    n_distinct(testsCompleted_today$testCode)
  })
  
  output$testsYesterday_sidebar <- renderText ({
    n_distinct(testsCompleted_yesterday$testCode)
  })
  
  
  # NUMBER OF TESTS BY SCHOOL (TEXT)
  output$selected_testCounter <- renderText ({
    filteredSchool_counter <- tests_overTime2 %>% filter(sede == input$schoolList_counter)
    "Number of tests completed"
    n_distinct(filteredSchool_counter$testCode)
  }) # /render
  
  
  #PLOT OF TESTS TAKEN OVER TIME (LINE PLOT)
  output$testsOverTime <- renderPlot({
    ggplot(data = tests_overTime, aes(x = Date, y = Test_Number)) +
      geom_line(color = "blue") +
      geom_point(shape = 20, size = 0.5) +
      scale_x_datetime(breaks = date_breaks("1 months"),
                       labels = date_format(format = "%b-%Y")) +
      labs(title = paste0("Tests completed over time", " (", count_tests, " tests)")) +
      labs(x = "Time", y = "Total Tests") +
      theme(axis.text.x = element_text(angle = 35, hjust = 1))
  }) # /render

  
  #PLOT OF TESTS BY SEDE (BAR CHART)
  output$testsBySede <- renderPlot({
    ggplot(data = count_bySede, aes(x = reorder(sede, -Count), y = Count)) +
      geom_bar(stat = "identity", fill = "steelblue") +
      geom_text(aes(label = Count), vjust = -0.3, size = 3.5) +
      labs(x = "Sede", y = "Number of Tests") +
      labs(title = "Total tests completed by sede") +
      theme(axis.text.x = element_text(angle = 35, hjust = 1))
  }) # /render
  
  
  #PLOT OF TIME TAKEN TO COMPLETE THE SEAT (BAR CHART)
  output$testLength <- renderPlot({
    ggplot(data = time_taken_filteredToSixty, aes(x = time_taken_filteredToSixty$times)) +
      geom_bar(fill = "blue", width = 0.5) +
      geom_vline(xintercept = mean(time_taken_filteredToSixty$times), color = "red") +
      labs(title = "Times taken to complete the SEAT (<60 mins)") +
      labs(x = "Length of Test (minutes)", y = "Count of Tests") +
      annotate("text", x = 30, y = 50, label = text_for_plot_avg) +
      scale_x_continuous(breaks = seq(from = 0,
                                      to = ceiling(max(time_taken_filteredToSixty$times)) + 10, by = 5)) +
      scale_y_continuous(breaks = seq(from = 0, to = 100, by = 25)) +
      theme(axis.text.x = element_text(angle = 35, hjust = 1))
  }) # /render
  
  
  #QUARTILES OF TIME TAKEN TO COMPLETE THE SEAT  
  output$stats <- renderPrint({
    summary(time_taken_filteredToSixty$times)
  }) # /render
  
  
  #PLOT OF FC DONE/NOT DONE (PIE CHART)
  output$fluencyDone <- renderPlot({
    ggplot(count_ifFluencyDone, aes("", Count, fill = If_Done)) +
      ggtitle("Fluency Check done?") +
      geom_col(position = "fill") +
      theme(axis.text.x = element_blank(), axis.title.x = element_blank(),
            axis.title.y = element_blank(), legend.title = element_blank()) +
      geom_label(aes(label = paste0(round(Count / sum(Count) * 100), "%")),
                 position = position_fill(vjust = 0.5)) +
      coord_polar(theta = "y")
  }) # /render
  
  
  #PLOT OF TESTS DONE BY SEDE (HISTOGRAM W/ DROP DOWN LIST)
  output$testsBySchool <- renderPlot({
    
    filteredSchool_plot <- tests_overTime2 %>% filter(sede == input$schoolList_plot)
    #create a weeks column, to sort the histogram into
    filteredSchool_plot$weeks <- cut(filteredSchool_plot[, "firstQ"], breaks = "week")
    schoolName <- input$schoolList_plot
    schoolTestCount <- n_distinct(filteredSchool_plot$testCode)
    
    ggplot(data = filteredSchool_plot, aes(x = as.Date(weeks))) +
      geom_histogram(color = "blue", fill = "red") +
      stat_bin(aes(y = ..count.., label = ..count..), geom = "text", vjust = -.5) +
      labs(title = paste0("SEATs completed by ", schoolName,
                          "  (", schoolTestCount, " tests)")) +
      labs(x = "Date", y = "Tests") +
      scale_x_date(labels = date_format("%b-%Y"), breaks = "1 month") + 
      theme(axis.text.x = element_text(angle = 35, hjust = 1))
  }) # /render

  
  #TESTS >60 MINS (TABLE)
    output$longTests <- renderTable({
      time_taken_filteredLong_shiny
  }) # /render
  
  #TESTS <5 MINS (TABLE)
  output$shorttests <- renderTable({
    time_taken_filteredShort_shiny
  }) # /render  

    
  #LATEST FEEDBACK (TABLE)
  output$latestFeedback <- renderTable({
    head(df_feedback, n = input$feedbackCount)
  }) # /render
  
  
  #TIMES TO COMPLETE EACH SEAT SECTION (MULTI-CHART)
  output$timesEachSection <- renderPlot({
    #each plot is made, and then stitched together using ggpubr
    
    # multiple choice histogram (first apply the filter from selectInput)
    mc_timestamps_filtered <- mc_timestamps %>% filter(shkLev == input$chooseSSL)
    
    mc_hist <- ggplot(data = mc_timestamps_filtered, aes(mc_timestamps_filtered$MC)) +
      geom_histogram(binwidth = 1,
                     col = "blue",
                     fill = "blue",
                     alpha = 0.5) +
      #  stat_count(aes(y = ..count.., label = ..count..), geom = "text", size = 2.5, vjust = -1) +
      labs(x = "Multiple Choice", y = "count", size =1) +
      scale_x_continuous(breaks = seq(from = 0, to = ceiling(max(mc_timestamps$MC)) + 1, by = 3))
    
    # sentence completion histogram (first apply the filter from selectInput)
    sc_timestamps_filtered <- sc_timestamps %>% filter(shkLev == input$chooseSSL)
    
    sc_hist <- ggplot(data = sc_timestamps_filtered, aes(sc_timestamps_filtered$SC)) +
      geom_histogram(binwidth = 1,
                     col = "red",
                     fill = "red",
                     alpha = 0.5) +
      #  stat_count(aes(y = ..count.., label = ..count..), geom = "text", size = 2.5, vjust = -1) +
      labs(x = "Sentence Completion", y = "count") +
      scale_x_continuous(breaks = seq(from = 0, to = ceiling(max(sc_timestamps_filtered$SC)) + 1, by = 3))
    
    # word order histogram (first apply the filter from selectInput)
    wo_timestamps_filtered <- wo_timestamps %>% filter(shkLev == input$chooseSSL)
    
    wo_hist <- ggplot(data = wo_timestamps_filtered, aes(wo_timestamps_filtered$WO)) +
      geom_histogram(binwidth = 1,
                     col = "green",
                     fill = "green",
                     alpha = 0.5) +
      #  stat_count(aes(y = ..count.., label = ..count..), geom = "text", size = 2.5, vjust = -1) +
      labs(x = "Word Order", y = "count") +
      scale_x_continuous(breaks = seq(from = 0, to = ceiling(max(wo_timestamps_filtered$WO)) + 1, by = 3))
    
    # listening histogram (first apply the filter from selectInput)
    li_timestamps_filtered <- li_timestamps %>% filter(shkLev == input$chooseSSL)
    
    li_hist <- ggplot(data = li_timestamps_filtered, aes(li_timestamps_filtered$LI)) +
      geom_histogram(binwidth = 1,
                     col = "grey",
                     fill = "grey",
                     alpha = 0.5) +
      #  stat_count(aes(y = ..count.., label = ..count..), geom = "text", size = 2.5, vjust = -2) + 
      labs(x = "Listening", y = "count") +
      scale_x_continuous(breaks = seq(from = 0, to = ceiling(max(li_timestamps_filtered$LI)) + 1, by = 3))
    
    #now each plot is stitched together for display
    section_times_plot <- ggarrange(mc_hist, sc_hist, wo_hist, li_hist, ncol = 2, nrow = 2)
    annotate_figure(section_times_plot,
                    top = text_grob("Times to complete each SEAT section (minutes)",
                                    color = "red", face = "bold", size = 12))
  }) # /render
  
  output$mcBoxplot <- renderPlot({
    mcBox <- ggplot(data = mc_timestamps_box, aes(x = shkLev, y = MC)) +
      geom_boxplot() +
      labs(title = "MC section completion times by SSL") +
      labs(x = "MC Section time to complete (minutes)", y = "Proposed Shenker Starting Levels")
    mcBox + coord_flip()
  }) # /render
  
  output$scBoxplot <- renderPlot({
    scBox <- ggplot(data = sc_timestamps_box, aes(x = shkLev, y = SC)) +
      geom_boxplot() +
      labs(title = "SC section completion times by SSL") +
      labs(x = "SC Section time to complete (minutes)", y = "Proposed Shenker Starting Levels")
    scBox + coord_flip()  
  })  # /render

  output$woBoxplot <- renderPlot({
    woBox <- ggplot(data = wo_timestamps_box, aes(x = shkLev, y = WO)) +
      geom_boxplot() +
      labs(title = "WO section completion times by SSL") +
      labs(x = "WO Section time to complete (minutes)", y = "Proposed Shenker Starting Levels")
    woBox + coord_flip()    
  }) # /render

  output$liBoxplot <- renderPlot({
    liBox <- ggplot(data = li_timestamps_box, aes(x = shkLev, y = LI)) +
      geom_boxplot() +
      labs(title = "LI section completion times by SSL") +
      labs(x = "LI Section time to complete (minutes)", y = "Proposed Shenker Starting Levels")
    liBox + coord_flip()    
  })  # /render

  
} # /server

# stitching the ui and server instructions together
shinyApp(ui = ui, server = server)

## - END SHINY, END FILE - ##
